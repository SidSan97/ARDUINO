// include the library code:
#include <LiquidCrystal.h>

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
// Potenciômetro de volante
const int POTPIN = 1;
const int MAXPOT = 800; 

// Auto-falante
const int BUZZER = 10;

const int RANDSEEDPIN = 0; 

const int MAX_TEMP = 300; // Comeca devagar, cada passo é 1 miliseg mais curto.
const int MIN_TEMP = 150; // Velocidade maxima do carro

const int CARROS = 6; //Variavel dos Carros

// Desenha os carros no LCD
byte glyphs[CARROS][8] = {
  // 1: Carro na parte de cima da tela
  { B00000,
    B01110,
    B11111,
    B01010,
    B00000,
    B00000,
    B00000,
    B00000}
  // 2: Carro na parte de baixo da tela
  ,{B00000,
    B00000,
    B00000,
    B00000,
    B01110,
    B11111,
    B01010,
    B00000}
  // 3: Outros carros na parte de cima
  ,{B00000,
    B11110,
    B11111,
    B01010,
    B00000,
    B00000,
    B00000,
    B00000}
  // 4: Outros carros na parte de baixo
  ,{B00000,
    B00000,
    B00000,
    B00000,
    B11110,
    B11111,
    B01010,
    B00000}
  // 5: Batida na parte de cima da tela
  ,{B10101,
    B01110,
    B01110,
    B10101,
    B00000,
    B00000,
    B00000,
    B00000}
  // 6: Batida na parte de baixo da tela
  ,{B00000,
    B00000,
    B00000,
    B10101,
    B01110,
    B01110,
    B10101,
    B00000}
};

const int NCARPOSITIONS = 4;

const char VAZIO = 32;
char car2glyphs[NCARPOSITIONS][2] = {
  {1,VAZIO},{2,VAZIO},{VAZIO,1},{VAZIO,2}
};
char truck2glyphs[NCARPOSITIONS][2] = {
  {3,VAZIO},{4,VAZIO},{VAZIO,3},{VAZIO,4}
};
char crash2glyphs[NCARPOSITIONS][2] = {
  {5,VAZIO},{6,VAZIO},{VAZIO,5},{VAZIO,6}
};

const int ROADLEN = 15; // Largura do LCD (sem contar o nosso carro)
int road[ROADLEN]; // Posição dos outros carros
char line_buff[2+ROADLEN]; // string auxiliar para drawRoad ()
int road_index;
int car_pos;
// Off-the-grid position significa coluna vazia, então MAXROADPOS
// determina a probabilidade de um carro em uma coluna
// por exemplo: 3 * NCARPOSITIONS dá p = 1/3 = probabilidade do carro surgir na coluna
const int MAXROADPOS = 3*NCARPOSITIONS;
int step_duration;

int crash; // Variavel da batida
unsigned int crashtime; // millis() quando bater
const int CRASHSOUNDDURATION = 250;

const char *INTRO1="Iniciando...";
const char *INTRO2=" Boa sorte!";
const int INTRODELAY = 2000;

void setup()
{
  crash = crashtime = road_index = 0;
  step_duration = MAX_TEMP;
  line_buff[1+ROADLEN] = '\0'; // caractere nulo qando bater
  randomSeed(analogRead(RANDSEEDPIN));
  for (int i=0; i<CARROS; i++) {
    lcd.createChar(i+1,glyphs[i]);
  }
  for (int i=0; i<ROADLEN; i++) {
    road[i]=-1;
  }
  pinMode(BUZZER,OUTPUT);
  analogWrite(BUZZER,0); // Som enquanto nao bate
  lcd.begin(16,2);
  getSteeringWheel();
  drawRoad();
  lcd.setCursor(1,0);
  lcd.print(INTRO1);
  lcd.setCursor(1,1);
  lcd.print(INTRO2);
  delay(INTRODELAY);
}

void loop() {
  unsigned long now = millis()-INTRODELAY;
  if (!crash) {
    getSteeringWheel();
    crash = (car_pos==road[road_index]);
  }
  if (crash) {
    if (!crashtime) {
      crashtime=now;
      drawRoad();
      // Frases do Game Over
      // (mantenha as 2 primeiras colunas intactas após bater)
      lcd.setCursor(2,0);
      lcd.print("Voce Bateu! :(");
      lcd.setCursor(2,1);
      lcd.print(now/1000);
      lcd.print(" Segundos.");
    }
    if ((now-crashtime)<CRASHSOUNDDURATION) {
      analogWrite(BUZZER,random(255)); // Som após batida
    } 
    else {
      analogWrite(BUZZER,0);    
    }
    delay(10); // Espere um pouco antes de iniciar de novo
  } 
  else {

    int prev_pos = road[(road_index-1)%ROADLEN];
    int this_pos = random(MAXROADPOS);
    while (abs(this_pos-prev_pos)<2) { 
      this_pos = random(MAXROADPOS);
    }
    road[road_index] = this_pos;
    road_index = (road_index+1)%ROADLEN;
    drawRoad();
    delay(step_duration);
    if (step_duration>MIN_TEMP) {
      step_duration--; // Jogo comaça a acelerar a medida que vc vai avançando
    }
  }
}
void getSteeringWheel() {
  car_pos = map(analogRead(POTPIN),0,1024,0,NCARPOSITIONS);
}

void drawRoad() {
  for (int i=0; i<2; i++) {
    if (crash) {
      line_buff[0]=crash2glyphs[car_pos][i];
    } 
    else {
      line_buff[0]=car2glyphs[car_pos][i];
    }
    for (int j=0; j<ROADLEN; j++) {
      int pos = road[(j+road_index)%ROADLEN];
      line_buff[j+1] = pos>=0 && pos<NCARPOSITIONS ? truck2glyphs[pos][i] : VAZIO;
    }
    lcd.setCursor(0,i);
    lcd.print(line_buff);
  }
}